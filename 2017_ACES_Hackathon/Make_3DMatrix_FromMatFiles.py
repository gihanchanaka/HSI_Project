import scipy as sp
import scipy.io as io
import numpy as np

def readMatFilesGeneratedFromTiffFiles():
    yMax=100
    xMax=100
    noOfWaveBands=100 #including unwanted files

    startFileNo=5000
    endFileNo=6000
    inputFilePrefix='Row_'
    inputFileSuffix='.mat'

    unwantedFileNames=[]
    for i in range(58,76+1):
        unwantedFileNames.append(i)
    for i in range(225,242+1):
        unwantedFileNames.append(i)



    z=0
    for fileNo in range(startFileNo,endFileNo+1):
        if(not unwantedFileNames.__contains__(fileNo)):
            fileName=inputFilePrefix+str(fileNo)+inputFileSuffix
            mat = io.loadmat(fileName)['B']

            for y in range(yMax):
                for x in range(xMax):
                    M[y][x][z]=mat[y][x]
                    if(fileNo<71): M[y][x][z]/=40
                    else: M[y][x][z]/=80

            z+=1

    return M

def readMatFilesGeneratedFromTiffFilesAndCalculateReflectance():
    M=readMatFilesGeneratedFromTiffFiles()

    ESUN=[1650.52000000000,1714.90000000000,1994.52000000000,2034.72000000000,1970.1000000000,2036.22000000000,1860.24000000000,1953.29000000000,
1953.55000000000,1804.56000000000,1905.51000000000,1877.50000000000,1883.51000000000,1821.99000000000,1841.92000000000,1847.51000000000,
1779.99000000000,1761.45000000000,1740.80000000000,1708.88000000000,1672.09000000000,1632.83000000000,1591.92000000000,1557.66000000000,
1525.41000000000,1470.93000000000,1450.37000000000,1393.18000000000,1372.75000000000,1235.63000000000,1266.13000000000,1279.02000000000,
1265.22000000000,1235.37000000000,1202.29000000000,1194.08000000000,1143.60000000000,1128.16000000000,1108.48000000000,1068.50000000000,
1039.70000000000,1023.84000000000,938.960000000000,949.970000000000,949.740000000000,929.540000000000,917.320000000000,892.690000000000,
877.590000000000,834.600000000000,876.100000000000,839.340000000000,841.540000000000,810.200000000000,802.220000000000,784.440000000000,
772.220000000000,758.600000000000,743.880000000000,721.760000000000,714.260000000000,698.690000000000,682.410000000000,669.610000000000,
657.860000000000,643.480000000000,623.130000000000,603.890000000000,582.630000000000,579.580000000000,571.800000000000,562.300000000000,
551.400000000000,540.520000000000,534.170000000000,519.740000000000,511.290000000000,497.280000000000,492.820000000000,479.410000000000,
479.560000000000,469.010000000000,461.600000000000,451,444.060000000000,435.250000000000,429.290000000000,415.690000000000,
412.870000000000,405.400000000000,396.940000000000,391.940000000000,386.790000000000,380.650000000000,370.960000000000,365.570000000000,
358.420000000000,355.180000000000,349.040000000000,342.100000000000,336,325.940000000000,325.710000000000,318.270000000000,
312.120000000000,308.080000000000,300.520000000000,292.270000000000,293.280000000000,282.140000000000,285.600000000000,280.410000000000,
275.870000000000,271.970000000000,265.730000000000,260.200000000000,251.620000000000,244.110000000000,247.830000000000,242.850000000000,
238.150000000000,239.290000000000,227.380000000000,226.690000000000,225.480000000000,218.690000000000,209.070000000000,210.620000000000,
206.980000000000,201.590000000000,198.090000000000,191.770000000000,184.020000000000,184.910000000000,182.750000000000,180.090000000000,
175.180000000000,173,168.870000000000,165.190000000000,156.300000000000,159.010000000000,155.220000000000,152.620000000000,
149.140000000000,141.630000000000,139.430000000000,139.220000000000,137.970000000000,136.730000000000,133.960000000000,130.290000000000,
124.500000000000,124.750000000000,123.920000000000,121.950000000000,118.960000000000,117.780000000000,115.560000000000,114.520000000000,
111.650000000000,109.210000000000,107.690000000000,106.130000000000,103.700000000000,102.420000000000,100.420000000000,98.2700000000000,
97.3700000000000,95.4400000000000,93.5500000000000,92.3500000000000,90.9300000000000,89.3700000000000,84.6400000000000,85.4700000000000,
84.4900000000000,83.4300000000000,81.6200000000000,80.6700000000000,79.3200000000000,78.1100000000000,76.6900000000000,75.3500000000000,
74.1500000000000,73.2500000000000,71.6700000000000,70.1300000000000,69.5200000000000,68.2800000000000,66.3900000000000,65.7600000000000,
65.2300000000000,63.0900000000000,62.9000000000000,61.6800000000000,60,59.9400000000000]
    for y in range(M):
        for x in range(M[0]):
            for z in range(M[0][0]):
                M[y][x][z]=(M[y][x][z]*3.14*1.0057)/ESUN[z]
    return M



def saveToRowFiles(M):
    for y in range(len(M)):
        outputFileName='ROW_'+str(y)
        np.savetxt(outputFileName,M[y])
# >>>>>>>>>>>>>>>>>>>>>>>>MAIN<<<<<<<<<<<<<<<<<<<
ar=readMatFilesGeneratedFromTiffFilesAndCalculateReflectance()
print('Size of M is')
print(len(ar),len(ar[0]),len(ar[0][0]))
print('A sample pixel spectral data')
print(ar[0][0])
saveToRowFiles(ar)
print("Saved")